import paramiko
import os
from dotenv import load_dotenv
from cryptography.fernet import Fernet

load_dotenv()


class SFTP():
    def __init__(self):
        self.host = "172.105.251.249"
        self.user = "root"
        self.password = "SAkiniolinga@123a"
        # self.localpath = os.getenv("LOCALPATH")
        self.remotepath = "/var/www"
        self.ssh_client = paramiko.SSHClient()
        self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.ssh_client.connect(
            hostname=self.host, username=self.user, password=self.password)

    def uploadEncrypt(self):
        key = Fernet.generate_key()
        with open("key.key", "wb") as keyfile:
            keyfile.write(key)
        files = []
        for file in os.listdir():
            if os.path.isfile(file):
                if file == "test.txt":
                    files.append(file)
                print(file)

        # open an sftp connection to my remote client
        ftp_client = self.ssh_client.open_sftp()

        # this will send the file to the server and then encrypt the file
        for eachfile in files:
            print("uploaded")
            ftp_client.put(eachfile, f"{self.remotepath}/{eachfile}")
            # after successfully sending the file to server encrypt the file using the key file sent
            # with open(eachfile, "rb") as file:
            #     contents = file.read()
            # contents_encrypted = Fernet(key).encrypt(contents)
            # with open(eachfile, "wb") as file:
            #     file.write(contents_encrypted)

        # finally close the ftp connection to the remote host
        ftp_client.close()
