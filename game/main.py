# This is the main.py game file
# The game starts in this file
# This is a guessing game and will act as the innocuous bit of the malware
# Simple pygame program

# Import and initialize the pygame library
import pygame
from .enemy import Enemy
from .player import Player
from pygame.locals import (
    K_ESCAPE,
    KEYDOWN,
)
from malware.daemon import Daemon


class Game():
    def __init__(self):
        self.screen_height = 500
        self.screen_width = 500

        # Set up the drawing window
        self.screen = pygame.display.set_mode(
            [self.screen_width, self.screen_height])

        # Run until the user asks to quit
        self.running = True

    def game(self):
        clock = pygame.time.Clock()
        ADDENEMY = pygame.USEREVENT + 1
        pygame.time.set_timer(ADDENEMY, 250)
        player = Player()

        enemies = pygame.sprite.Group()
        all_sprites = pygame.sprite.Group()
        all_sprites.add(player)
        pygame.mixer.init()
        sound = pygame.mixer.Sound("game/assets/cauliflower.wav")
        sound.play()

        while self.running:

            # Did the user click the window close button?
            for event in pygame.event.get():
                if event.type == KEYDOWN:
                    # Was it the Escape key? If so, stop the loop.
                    if event.key == K_ESCAPE:
                        self.running = False
                elif event.type == pygame.QUIT:
                    self.running = False

                elif event.type == ADDENEMY:
                    # Create the new enemy and add it to sprite groups
                    new_enemy = Enemy()
                    enemies.add(new_enemy)
                    all_sprites.add(new_enemy)

            # Create a custom event for adding a new enemy

            # Get all the keys currently pressed
            pressed_keys = pygame.key.get_pressed()

            # Update the player sprite based on user keypresses
            player.update(pressed_keys)
            enemies.update()

            self.screen.fill((0, 0, 255))

            # Draw all sprites
            for entity in all_sprites:
                self.screen.blit(entity.surf, entity.rect)

            # Check if any enemies have collided with the player
            if pygame.sprite.spritecollideany(player, enemies):
                # If so, then remove the player and stop the loop
                player.kill()
                self.running = False

            # Flip the display
            pygame.display.flip()
            clock.tick(30)

        pygame.quit()
